#!/usr/bin/env python3
"""
„Éá„Éê„ÉÉ„Ç∞Áâà„Éê„ÉÉ„ÉÅÂá¶ÁêÜ - Ë©≥Á¥∞„É≠„Ç∞Âá∫Âäõ
"""
import os
import sys
import json
import time
from datetime import datetime
from typing import Dict, List, Any

# „Éó„É≠„Ç∏„Çß„ÇØ„Éà„É´„Éº„Éà„Çí„Éë„Çπ„Å´ËøΩÂä†
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from utils.mysql_connection_manager import get_mysql_manager
from services.dlogic_raw_data_manager import DLogicRawDataManager

# MySQLÊé•Á∂ö„Éû„Éç„Éº„Ç∏„É£„Éº
mysql_manager = get_mysql_manager()

def debug_batch_process():
    """„Éá„Éê„ÉÉ„Ç∞Áâà„Éê„ÉÉ„ÉÅÂá¶ÁêÜ"""
    print("üöÄ „Éá„Éê„ÉÉ„Ç∞Áâà„Éê„ÉÉ„ÉÅÂá¶ÁêÜÈñãÂßã")
    print(f"üïê ÈñãÂßãÊôÇÂàª: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Êé•Á∂ö„ÉÜ„Çπ„Éà
    print("üì° MySQLÊé•Á∂ö„ÉÜ„Çπ„Éà‰∏≠...")
    if not mysql_manager.test_connection():
        print("‚ùå MySQLÊé•Á∂ö„ÉÜ„Çπ„ÉàÂ§±Êïó")
        return
    print("‚úÖ MySQLÊé•Á∂ö„ÉÜ„Çπ„ÉàÊàêÂäü")
    
    # „Éä„É¨„ÉÉ„Ç∏„Éû„Éç„Éº„Ç∏„É£„ÉºÂàùÊúüÂåñ
    print("üìã „Éä„É¨„ÉÉ„Ç∏„Éû„Éç„Éº„Ç∏„É£„ÉºÂàùÊúüÂåñ‰∏≠...")
    try:
        manager = DLogicRawDataManager()
        current_count = len(manager.knowledge_data.get("horses", {}))
        print(f"‚úÖ ÁèæÂú®„ÅÆ„Éä„É¨„ÉÉ„Ç∏Êï∞: {current_count:,}È†≠")
    except Exception as e:
        print(f"‚ùå „Éä„É¨„ÉÉ„Ç∏„Éû„Éç„Éº„Ç∏„É£„ÉºÂàùÊúüÂåñ„Ç®„É©„Éº: {e}")
        return
    
    # Êó¢Â≠ò„ÅÆÈ¶¨Âêç„ÇíÂèñÂæó
    print("üîç Êó¢Â≠ò„Éá„Éº„Çø„ÅÆËß£Êûê‰∏≠...")
    existing_horses = set(manager.knowledge_data.get("horses", {}).keys())
    print(f"üìä Êó¢Â≠òÈ¶¨ÂêçÊï∞: {len(existing_horses):,}È†≠")
    
    # „Éá„Éº„Çø„Éô„Éº„Çπ„Åã„ÇâÂØæË±°È¶¨„ÇíÊäΩÂá∫
    print("üêé „Éá„Éº„Çø„Éô„Éº„Çπ„Åã„ÇâÂØæË±°È¶¨„ÇíÊäΩÂá∫‰∏≠...")
    try:
        horses = mysql_manager.execute_query("""
            SELECT DISTINCT BAMEI, COUNT(*) as race_count
            FROM umagoto_race_joho 
            WHERE KAISAI_NEN >= '2020'
            AND BAMEI IS NOT NULL 
            AND BAMEI != ''
            AND KAKUTEI_CHAKUJUN IS NOT NULL
            GROUP BY BAMEI
            HAVING race_count >= 3
            ORDER BY race_count DESC
            LIMIT 100
        """)
        print(f"‚úÖ „Éá„Éº„Çø„Éô„Éº„Çπ„Åã„Çâ {len(horses):,}È†≠„ÇíÊäΩÂá∫")
        
        # Êú™Âá¶ÁêÜ„ÅÆÈ¶¨„ÅÆ„Åø„Éï„Ç£„É´„Çø„Éº
        unprocessed_horses = [h for h in horses if h['BAMEI'] not in existing_horses]
        print(f"üéØ Êú™Âá¶ÁêÜÈ¶¨Êï∞: {len(unprocessed_horses):,}È†≠")
        
        if len(unprocessed_horses) == 0:
            print("‚úÖ ÂÖ®„Å¶„ÅÆÈ¶¨„ÅÆÂá¶ÁêÜ„ÅåÂÆå‰∫Ü„Åó„Å¶„ÅÑ„Åæ„Åô")
            
            # „Çà„ÇäÂ§ö„Åè„ÅÆÈ¶¨„ÇíÂØæË±°„Å´„Åó„Å¶ÂÜç„ÉÅ„Çß„ÉÉ„ÇØ
            print("üîç ÂØæË±°ÁØÑÂõ≤„ÇíÊã°Â§ß„Åó„Å¶ÂÜç„ÉÅ„Çß„ÉÉ„ÇØ...")
            horses_expanded = mysql_manager.execute_query("""
                SELECT DISTINCT BAMEI, COUNT(*) as race_count
                FROM umagoto_race_joho 
                WHERE KAISAI_NEN >= '2015'
                AND BAMEI IS NOT NULL 
                AND BAMEI != ''
                AND KAKUTEI_CHAKUJUN IS NOT NULL
                GROUP BY BAMEI
                HAVING race_count >= 2
                ORDER BY race_count DESC
                LIMIT 1000
            """)
            unprocessed_expanded = [h for h in horses_expanded if h['BAMEI'] not in existing_horses]
            print(f"üìà Êã°Â§ßÁØÑÂõ≤„Åß„ÅÆÊú™Âá¶ÁêÜÈ¶¨Êï∞: {len(unprocessed_expanded):,}È†≠")
            
            if len(unprocessed_expanded) > 0:
                print("üöÄ Êã°Â§ßÁØÑÂõ≤„ÅßÂá¶ÁêÜ„ÇíÁ∂ôÁ∂ö„Åó„Åæ„Åô")
                unprocessed_horses = unprocessed_expanded[:500]  # ÊúÄÂ§ß500È†≠„Åæ„Åß
            else:
                print("‚úÖ „Åô„Åπ„Å¶„ÅÆÂá¶ÁêÜ„ÅåÂÆå‰∫ÜÊ∏à„Åø„Åß„Åô")
                return
        
        # ÂÆüÈöõ„ÅÆÂá¶ÁêÜÈñãÂßã
        print(f"üèÅ {len(unprocessed_horses):,}È†≠„ÅÆÂá¶ÁêÜ„ÇíÈñãÂßã")
        processed = 0
        errors = 0
        
        for i, horse_data in enumerate(unprocessed_horses[:10]):  # ÊúÄÂàù„ÅÆ10È†≠„Åß„ÉÜ„Çπ„Éà
            horse_name = horse_data['BAMEI']
            print(f"üêé Âá¶ÁêÜ‰∏≠: {horse_name} ({i+1}/{min(10, len(unprocessed_horses))})")
            
            try:
                # „Éá„Éº„ÇøÊäΩÂá∫
                raw_data = extract_horse_data_simple(horse_name)
                
                if raw_data:
                    manager.add_horse_knowledge(horse_name, raw_data)
                    processed += 1
                    print(f"‚úÖ {horse_name} Âá¶ÁêÜÂÆå‰∫Ü")
                else:
                    print(f"‚ö†Ô∏è {horse_name} „Éá„Éº„Çø„Å™„Åó")
                    
            except Exception as e:
                errors += 1
                print(f"‚ùå {horse_name} „Ç®„É©„Éº: {e}")
        
        # ÁµêÊûú‰øùÂ≠ò
        if processed > 0:
            manager.save_knowledge_data()
            print(f"üíæ {processed}È†≠„ÅÆ„Éá„Éº„Çø„Çí‰øùÂ≠òÂÆå‰∫Ü")
        
        print("\nüìä Âá¶ÁêÜÁµêÊûú:")
        print(f"   Âá¶ÁêÜÊàêÂäü: {processed}È†≠")
        print(f"   „Ç®„É©„Éº: {errors}È†≠")
        
    except Exception as e:
        print(f"‚ùå „Éá„Éº„Çø„Éô„Éº„Çπ„ÇØ„Ç®„É™„Ç®„É©„Éº: {e}")

def extract_horse_data_simple(horse_name: str) -> Dict[str, Any]:
    """„Ç∑„É≥„Éó„É´„Å™„Éá„Éº„ÇøÊäΩÂá∫"""
    try:
        races = mysql_manager.execute_query("""
            SELECT 
                KAKUTEI_CHAKUJUN as finish,
                TANSHO_ODDS as odds,
                TANSHO_NINKIJUN as popularity,
                KAISAI_NEN as year
            FROM umagoto_race_joho 
            WHERE BAMEI = %s
            AND KAISAI_NEN >= '2020'
            AND KAKUTEI_CHAKUJUN IS NOT NULL
            ORDER BY KAISAI_NEN DESC
            LIMIT 10
        """, (horse_name,))
        
        if not races:
            return None
        
        return {
            "basic_info": {
                "name": horse_name,
                "total_races": len(races),
                "recent_performance": races
            },
            "processed_at": datetime.now().isoformat()
        }
        
    except Exception as e:
        print(f"‚ùå {horse_name}„ÅÆ„Éá„Éº„ÇøÊäΩÂá∫„Ç®„É©„Éº: {e}")
        return None

if __name__ == "__main__":
    debug_batch_process()